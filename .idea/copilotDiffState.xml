<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/main1.go">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main1.go" />
              <option name="originalContent" value="package main&#10;&#10;import (&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;net/http&quot;&#10;)&#10;&#10;type api struct {&#10;&#9;addr string&#10;}&#10;&#10;type User struct {&#10;&#9;Name  string `json:&quot;name&quot;`&#10;&#9;Age   int    `json:&quot;age&quot;`&#10;&#9;Email string `json:&quot;email&quot;`&#10;}&#10;&#10;var users = []User{}&#10;&#10;func (s *api) getUsersHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;&#10;&#9;err := json.NewEncoder(w).Encode(users)&#10;&#9;if err != nil {&#10;&#9;&#9;http.Error(w, err.Error(), http.StatusInternalServerError)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;w.WriteHeader(http.StatusOK)&#10;}&#10;&#10;func (s *api) createUsersHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;var payload User&#10;&#9;err := json.NewDecoder(r.Body).Decode(&amp;payload)&#10;&#9;if err != nil {&#10;&#9;&#9;http.Error(w, err.Error(), http.StatusBadRequest)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;u := User{&#10;&#9;&#9;Name:  payload.Name,&#10;&#9;&#9;Age:   payload.Age,&#10;&#9;&#9;Email: payload.Email,&#10;&#9;}&#10;&#10;&#9;users = append(users, u)&#10;&#10;&#9;w.WriteHeader(http.StatusCreated)&#10;}&#10;&#10;func main() {&#10;&#9;api := &amp;api{addr: &quot;:8080&quot;}&#10;&#10;&#9;mux := http.NewServeMux()&#10;&#10;&#9;srv := &amp;http.Server{&#10;&#9;&#9;Addr:    api.addr,&#10;&#9;&#9;Handler: mux,&#10;&#9;}&#10;&#10;&#9;mux.HandleFunc(&quot;GET /users&quot;, api.getUsersHandler)&#10;&#9;mux.HandleFunc(&quot;POST /users&quot;, api.createUsersHandler)&#10;&#10;&#9;err := srv.ListenAndServe()&#10;&#9;if err != nil {&#10;&#9;&#9;return &#10;&#9;}&#10;}&#10;" />
              <option name="updatedContent" value="package main&#10;&#10;import (&#10;&#9;&quot;encoding/json&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;net/http&quot;&#10;)&#10;&#10;// api represents our service configuration&#10;type api struct {&#10;&#9;addr string // Server address in format &quot;host:port&quot;&#10;}&#10;&#10;// User represents a user entity with basic information&#10;type User struct {&#10;&#9;Name  string `json:&quot;name&quot;`  // User's full name&#10;&#9;Age   int    `json:&quot;age&quot;`   // User's age&#10;&#9;Email string `json:&quot;email&quot;` // User's email address&#10;}&#10;&#10;// In-memory storage for users&#10;var users = []User{}&#10;&#10;// getUsersHandler returns all users as JSON response&#10;func (s *api) getUsersHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;// Set Content-Type header to application/json&#10;&#9;w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;&#10;&#9;// Encode users slice as JSON and write to response&#10;&#9;err := json.NewEncoder(w).Encode(users)&#10;&#9;if err != nil {&#10;&#9;&#9;http.Error(w, err.Error(), http.StatusInternalServerError)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;w.WriteHeader(http.StatusOK)&#10;}&#10;&#10;// createUsersHandler adds a new user from JSON request body&#10;func (s *api) createUsersHandler(w http.ResponseWriter, r *http.Request) {&#10;&#9;// Parse the request body into User struct&#10;&#9;var payload User&#10;&#9;err := json.NewDecoder(r.Body).Decode(&amp;payload)&#10;&#9;if err != nil {&#10;&#9;&#9;http.Error(w, err.Error(), http.StatusBadRequest)&#10;&#9;&#9;return&#10;&#9;}&#10;&#10;&#9;// Create a new user from payload&#10;&#9;u := User{&#10;&#9;&#9;Name:  payload.Name,&#10;&#9;&#9;Age:   payload.Age,&#10;&#9;&#9;Email: payload.Email,&#10;&#9;}&#10;&#10;&#9;// Add the new user to our users slice&#10;&#9;users = append(users, u)&#10;&#10;&#9;w.WriteHeader(http.StatusCreated)&#10;}&#10;&#10;func main() {&#10;&#9;// Initialize API with server address&#10;&#9;api := &amp;api{addr: &quot;:8080&quot;}&#10;&#10;&#9;// Create a new HTTP server multiplexer (router)&#10;&#9;mux := http.NewServeMux()&#10;&#10;&#9;// Configure HTTP server&#10;&#9;srv := &amp;http.Server{&#10;&#9;&#9;Addr:    api.addr,&#10;&#9;&#9;Handler: mux,&#10;&#9;}&#10;&#10;&#9;// Register HTTP route handlers&#10;&#9;mux.HandleFunc(&quot;GET /users&quot;, api.getUsersHandler)&#10;&#9;mux.HandleFunc(&quot;POST /users&quot;, api.createUsersHandler)&#10;&#10;&#9;// Start HTTP server&#10;&#9;fmt.Printf(&quot;Server starting on %s\n&quot;, api.addr)&#10;&#9;err := srv.ListenAndServe()&#10;&#9;if err != nil {&#10;&#9;&#9;// Print error message and exit&#10;&#9;&#9;fmt.Printf(&quot;Server error: %v\n&quot;, err)&#10;&#9;&#9;return&#10;&#9;}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>