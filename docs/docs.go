// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/health": {
            "get": {
                "description": "Returns comprehensive health information about the microservice including operational status,\nsystem timestamp, and version details. This endpoint is used for monitoring and load balancer health checks.\nAlways returns 200 OK when the service is running and can process requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get service health status",
                "responses": {
                    "200": {
                        "description": "Service is healthy and operational",
                        "schema": {
                            "$ref": "#/definitions/main.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - service may be unhealthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "x-order": 1
            }
        },
        "/v1/posts": {
            "post": {
                "description": "Create a new post with title, content, tags, and associate it with a user\nAll fields are validated before creation. Title must be between 3-100 characters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Post creation payload",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreatePostPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Post created successfully",
                        "schema": {
                            "$ref": "#/definitions/repo.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed for post data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/posts/{postID}": {
            "get": {
                "description": "Retrieve detailed information about a specific post including all associated comments\nReturns the complete post object with nested comments and user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Get post by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Post ID to retrieve",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post details with comments retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/repo.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently delete a post and all associated data including comments\nThis action cannot be undone. Only the post owner can delete their posts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Delete a post",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Post ID to delete",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post deleted successfully (no content returned)"
                    },
                    "400": {
                        "description": "Invalid post ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/posts/{postID}/comments": {
            "post": {
                "description": "Add a new comment to an existing post with the provided content and user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "posts"
                ],
                "summary": "Create a comment on a post",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Post ID to comment on",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment creation payload",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateCommentPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment created successfully",
                        "schema": {
                            "$ref": "#/definitions/repo.Comment"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or post ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "422": {
                        "description": "Validation failed for comment data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/feed": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Retrieve a chronological feed of posts from users that the authenticated user follows\nReturns posts ordered by creation date (newest first) with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user's personalized feed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of posts to retrieve (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of posts to skip for pagination (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO 8601 timestamp to get posts created after this time",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feed with pagination metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{userID}": {
            "get": {
                "description": "Retrieve detailed information about a specific user including their profile data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID to retrieve",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/repo.User"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{userID}/follow": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Create a following relationship between the authenticated user and the target user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the user to follow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully followed user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "201": {
                        "description": "Following relationship created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or cannot follow yourself",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Already following this user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{userID}/unfollow": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Remove the following relationship between the authenticated user and the target user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the user to unfollow",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unfollowed user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "204": {
                        "description": "Following relationship removed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or cannot unfollow yourself",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "User not found or not following",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CreateCommentPayload": {
            "description": "Request payload for creating a new comment",
            "type": "object",
            "required": [
                "content",
                "user_id"
            ],
            "properties": {
                "content": {
                    "description": "Comment content\n\t@example\t\"This is a great post!\"",
                    "type": "string",
                    "maxLength": 500,
                    "minLength": 1,
                    "example": "This is a great post!"
                },
                "likes": {
                    "description": "No. of likes\n\t@example\t5",
                    "type": "integer"
                },
                "user_id": {
                    "description": "ID of the user creating the comment\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "main.CreatePostPayload": {
            "type": "object",
            "required": [
                "content",
                "title",
                "userId"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "maxLength": 100
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "main.HealthResponse": {
            "description": "Health status information for the microservice",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Descriptive message about the service state\n\t@example\t\"Service is operational\"",
                    "type": "string",
                    "example": "Service is operational"
                },
                "status": {
                    "description": "Current operational status of the service\n\t@example\t\"healthy\"",
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "description": "UTC timestamp when the health check was performed\n\t@example\t\"2024-01-15T10:30:00.123Z\"",
                    "type": "string",
                    "example": "2024-01-15T10:30:00.123Z"
                },
                "version": {
                    "description": "Service version information (optional)\n\t@example\t\"1.0.0\"",
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "repo.Comment": {
            "description": "User comment on a specific post",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Comment content\n\t@example\t\"Great post! Thanks for sharing.\"",
                    "type": "string",
                    "example": "Great post! Thanks for sharing."
                },
                "created_at": {
                    "description": "Timestamp when the comment was created\n\t@example\t2024-01-15T11:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T11:30:00Z"
                },
                "id": {
                    "description": "Comment's unique identifier\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                },
                "post_id": {
                    "description": "ID of the post this comment belongs to\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                },
                "user": {
                    "$ref": "#/definitions/repo.User"
                },
                "user_id": {
                    "description": "ID of the user who created the comment\n\t@example\t2",
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "repo.Post": {
            "description": "Post content with metadata and associated comments",
            "type": "object",
            "properties": {
                "comments": {
                    "description": "List of comments on this post",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/repo.Comment"
                    }
                },
                "content": {
                    "description": "Post content/body\n\t@example\t\"This is the content of my first blog post...\"",
                    "type": "string",
                    "example": "This is the content of my first blog post..."
                },
                "created_at": {
                    "description": "Timestamp when the post was created\n\t@example\t2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "id": {
                    "description": "Post's unique identifier\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                },
                "tags": {
                    "description": "Associated tags for categorization\n\t@example\t[\"golang\",\"programming\",\"tutorial\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "golang",
                        "programming",
                        "tutorial"
                    ]
                },
                "title": {
                    "description": "Post title\n\t@example\t\"My First Blog Post\"",
                    "type": "string",
                    "example": "My First Blog Post"
                },
                "updated_at": {
                    "description": "Timestamp when the post was last updated\n\t@example\t2024-01-15T14:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T14:30:00Z"
                },
                "user": {
                    "$ref": "#/definitions/repo.User"
                },
                "user_id": {
                    "description": "ID of the user who created the post\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "repo.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Timestamp when the user account was created\n\t@example\t2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "email": {
                    "description": "User's email address\n\t@example\tjohn.doe@example.com",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "id": {
                    "description": "User's unique identifier\n\t@example\t1",
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "description": "User's unique username\n\t@example\tjohn_doe",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "x-extension-openapi": "{\"info\":{\"x-logo\":{\"url\":\"https://example.com/logo.png\"}}}"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Go Microservice API",
	Description:      "A production-ready Go microservice with posts, users, and social features\nThis API provides endpoints for managing posts, users, comments, and social interactions\nincluding user following/unfollowing and personalized feeds.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
